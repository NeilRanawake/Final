'use client'
import { TextInput, Box, Text, Group, Combobox, useCombobox, CloseButton, Drawer  } from "@mantine/core";
import { ActionIcon, useComputedColorScheme, Burger  } from '@mantine/core';
import { IconSun, IconMoon } from '@tabler/icons-react';
import { useState } from 'react';
import { AiOutlineSearch } from 'react-icons/ai';
import { useMantineColorScheme } from '@mantine/core';
import cx from 'clsx';
import classes from '../pages/Demo.module.css';
import { useMediaQuery } from 'react-responsive';
import React from 'react';
import MenuLinks from "./MenuLinks";
import useMediaQueries from '../components/useMediaQueries';



const books = [
  
  'Unfinished Endeavour of King Rajasinha 1',
  'Split of Czechoslovakia and Tamil Eelam',
  'Primary Grade 1',
  'Primary Grade 2',
  'Secondary Grade 7',
  'Secondary Grade 8',
  'Post Secondary Book 1',
  'Post Secondary Book 2',
  'ü•¶ Broccoli',
  'ü•ï Carrots',
  'üç´ Chocolate',
  'üçá Grapes',
];

interface HeaderProps {
  searchTerm: string | null;
  setSearchTerm: React.Dispatch<React.SetStateAction<string | null>>;
  
}

const Header: React.FC<HeaderProps> = ({ searchTerm, setSearchTerm}) => {

    const { setColorScheme } = useMantineColorScheme();
    const computedColorScheme = useComputedColorScheme('light', { getInitialValueInEffect: true });
    
    const screenSize = useMediaQueries();
  
    const combobox = useCombobox({
      onDropdownClose: () => {
        combobox.resetSelectedOption();
        setSearchTerm(value);
      }
    });
  
    const [value, setValue] = useState('');
    const shouldFilterOptions = !books.some((item) => item === value);
    const filteredOptions = shouldFilterOptions
      ? books.filter((item) => item.toLowerCase().includes(value.toLowerCase().trim()))
      : books;
  
    const options = filteredOptions.map((item) => (
      <Combobox.Option value={item} key={item}>
        {item}
      </Combobox.Option>
    ));
  
    const isLargeScreen = useMediaQuery({ minWidth: 768});
    const [drawerOpened, setDrawerOpened] = useState(false);
  
    const toggleDrawer = () => {
      setDrawerOpened(!drawerOpened);
    };
  
    const closeDrawer = () => {
      setDrawerOpened(false);
    };
   
    return (
  
          <nav >
         {/*<Box style={{ background:  'white !important' }}> */}
        <Text mx={20} mt={10} size='xs'>Generated by SRF</Text>
  
        <section style={{ display: 'flex', justifyContent: 'center', minHeight: 'auto' }}>
  
        {screenSize !== 'small' ? (
  <div>
    <Text c='red.8' mx={20} mt={4} size='lg' style={{ fontWeight: 'bold' }}>
      Buddha Dhamma School International
    </Text>
  </div>
) : null}


      <Combobox 
      onOptionSubmit={(optionValue) => {
        setValue(optionValue);
        combobox.closeDropdown();
        setSearchTerm(optionValue);
      }}
      store={combobox}
      withinPortal={false}
      
    >
      <Combobox.Target>
        <TextInput
          label=""
          placeholder="Search for Books"
          style={{ width: '100%', maxWidth: isLargeScreen ? 400 : 300 }}
          value={value}
          onChange={(event) => {
            setValue(event.currentTarget.value);
            combobox.openDropdown();
            combobox.updateSelectedOptionIndex();
            
          }}
          
          onClick={() => combobox.openDropdown()}
          onFocus={() => combobox.openDropdown()}
          onBlur={() => combobox.closeDropdown()}
          rightSection={
            value !== null ? (
              <CloseButton
                size="sm"
                onMouseDown={(event) => event.preventDefault()}
                onClick={() => setValue("")}
                aria-label="Clear value"
              />
            ) : (
              <Combobox.Chevron />
            )
          }
          leftSection={
            <AiOutlineSearch />
          }
        />
      </Combobox.Target>
  
      <Combobox.Dropdown>
        <Combobox.Options mah={200} style={{ overflowY: 'auto' }}>
          {options.length === 0 ? <Combobox.Empty>Nothing found</Combobox.Empty> : options}
        </Combobox.Options>
      </Combobox.Dropdown>
    </Combobox>
  
    <div style={{ display: 'flex', justifyContent: 'left' }}>      
    <ActionIcon mx={20}
        onClick={() => setColorScheme(computedColorScheme === 'light' ? 'dark' : 'light')}
        variant="default"
        size="36px"
        aria-label="Toggle color scheme"
      >
        <IconSun className={cx(classes.icon, classes.light)} stroke={1.5} color='yellow'/>
        <IconMoon className={cx(classes.icon, classes.dark)} stroke={1.5} />
      </ActionIcon>
    </div> 
    <Group  mx={10} justify='between' align='flex-end' style={{ height: '100%'}}>
          <Group gap='40' visibleFrom="md">
          
          <div>
        <MenuLinks />
        
      </div>
          {/* Other content goes here */}
          
          </Group>
          <Burger size="md" opened={drawerOpened} onClick={toggleDrawer} hiddenFrom='md' aria-label="Toggle navigation" />
          <Drawer position="left" opened={drawerOpened} onClose={closeDrawer} title={<span style={{ fontWeight: 'bold', color: 'blue', zIndex: 1000 }} >Menu</span>}>
  
          <div >
          {/* Drawer content goes here */}
          <Box mt={30} style={{ display: 'flex', flexDirection: 'column', justifyContent: 'left', gap:'30px' }}>
          <div>
        <MenuLinks />
        
      </div>
         
          </Box>
          </div>
          </Drawer>
    </Group>
    </section> 
    {/*</Box>*/}
    </nav>
  
    
      );

};   

export default Header;